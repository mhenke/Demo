AWSTemplateFormatVersion: 2010-09-09

Parameters:
  InstanceType:
    Description: The EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
  KeyName:
    Description: Name of an existing EC2 key pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
  ImageId:
    Type: 'AWS::EC2::Image::Id'
    Default: ami-0c1d914711f05b265

Description: >
  Hi, this is a demo template for creating a nodejs server on a ec2
Resources:
  MyTestVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: MyTestVpc

  MyTestIgw:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: my-test-igw

  MyTestAttachIgw:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyTestVpc
      InternetGatewayId: !Ref MyTestIgw

  MyTestVpcSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyTestVpc
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: my-test-vpc-public-subnet

  MyTestPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyTestVpc
      Tags:
        - Key: Name
          Value: my-test-public-route-table

  MyTestRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref MyTestPublicRouteTable
      SubnetId: !Ref MyTestVpcSubnet

  MyTestInternetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref MyTestPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyTestIgw

  MyTestVpcSg:
    Type: AWS::EC2::SecurityGroup
    DependsOn: MyTestVpc
    Properties:
      GroupDescription: SG to test ping
      VpcId: !Ref MyTestVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  MyTestEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref MyTestVpcSg
          SubnetId: !Ref MyTestVpcSubnet
      UserData:
        Fn::Base64: |
          #!/bin/bash 
          set -ex
          yum update -y && yum install git nodejs -y
          git clone https://github.com/mhenke/Demo.git
          cd Demo
          npm i
          npm i pm2 -g
          npx prisma migrate reset --force && npx prisma migrate dev --name init
          npm run build 
          pm2 start npm -- start

  MyTestVpcSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyTestVpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: my-test-vpc-private-subnet

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      VpcId: !Ref MyTestVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref MyTestVpcSg

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref MyTestVpcSubnet
        - !Ref MyTestVpcSubnet2

  PostgresDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: myappdb
      Engine: postgres
      MasterUsername: postgres
      MasterUserPassword: postgres123
      DBInstanceClass: db.t3.micro
      AllocatedStorage: '20'
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false

Outputs:
  MyTestVpc:
    Description: MyTestVpc
    Value: !Ref MyTestVpc
    Export:
      Name: MyTestVpc-ID
  WebsiteURL:
    Description: URL for newly created nextjs app
    Value: !Sub http://${MyTestEc2Instance.PublicDnsName}:3000
  DatabaseEndpoint:
    Description: Database endpoint
    Value: !Sub ${PostgresDB.Endpoint.Address}
